// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sine-service.proto

package sineservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Sine is the input needed to compute a sine wave
type Sine struct {
	Frequency            float64  `protobuf:"fixed64,1,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
	SampleRate           float64  `protobuf:"fixed64,2,opt,name=SampleRate,proto3" json:"SampleRate,omitempty"`
	Multiplier           float64  `protobuf:"fixed64,3,opt,name=Multiplier,proto3" json:"Multiplier,omitempty"`
	Length               int64    `protobuf:"varint,4,opt,name=Length,proto3" json:"Length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sine) Reset()         { *m = Sine{} }
func (m *Sine) String() string { return proto.CompactTextString(m) }
func (*Sine) ProtoMessage()    {}
func (*Sine) Descriptor() ([]byte, []int) {
	return fileDescriptor_24e51b160ca82afa, []int{0}
}

func (m *Sine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sine.Unmarshal(m, b)
}
func (m *Sine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sine.Marshal(b, m, deterministic)
}
func (m *Sine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sine.Merge(m, src)
}
func (m *Sine) XXX_Size() int {
	return xxx_messageInfo_Sine.Size(m)
}
func (m *Sine) XXX_DiscardUnknown() {
	xxx_messageInfo_Sine.DiscardUnknown(m)
}

var xxx_messageInfo_Sine proto.InternalMessageInfo

func (m *Sine) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Sine) GetSampleRate() float64 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *Sine) GetMultiplier() float64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *Sine) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// SineGraph is the an encoded file with optional debug text
type SineGraph struct {
	// Body contains a base64 encoded png
	Body string `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	// Message is optional debug
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SineGraph) Reset()         { *m = SineGraph{} }
func (m *SineGraph) String() string { return proto.CompactTextString(m) }
func (*SineGraph) ProtoMessage()    {}
func (*SineGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_24e51b160ca82afa, []int{1}
}

func (m *SineGraph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SineGraph.Unmarshal(m, b)
}
func (m *SineGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SineGraph.Marshal(b, m, deterministic)
}
func (m *SineGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SineGraph.Merge(m, src)
}
func (m *SineGraph) XXX_Size() int {
	return xxx_messageInfo_SineGraph.Size(m)
}
func (m *SineGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_SineGraph.DiscardUnknown(m)
}

var xxx_messageInfo_SineGraph proto.InternalMessageInfo

func (m *SineGraph) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *SineGraph) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Sine)(nil), "sineservice.Sine")
	proto.RegisterType((*SineGraph)(nil), "sineservice.SineGraph")
}

func init() { proto.RegisterFile("sine-service.proto", fileDescriptor_24e51b160ca82afa) }

var fileDescriptor_24e51b160ca82afa = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x8d, 0x5d, 0xaa, 0x3b, 0xbd, 0xe8, 0x1c, 0x6a, 0x10, 0x91, 0xb2, 0xa7, 0x5e, 0x9a,
	0x83, 0x1e, 0xc4, 0xeb, 0x1e, 0xda, 0x8b, 0x85, 0x92, 0xfd, 0x05, 0xeb, 0x3a, 0xb4, 0x91, 0x75,
	0x13, 0x93, 0x54, 0x11, 0xfc, 0xf1, 0x92, 0xa4, 0xd2, 0x40, 0x6f, 0x99, 0xef, 0xbd, 0xcc, 0x63,
	0x1e, 0xa0, 0x53, 0x03, 0x2d, 0x1c, 0xd9, 0x2f, 0xd5, 0x91, 0x30, 0x56, 0x7b, 0x8d, 0x93, 0xc0,
	0x0e, 0xa8, 0xfa, 0x85, 0xa2, 0x51, 0x03, 0xe1, 0x1d, 0x94, 0x4b, 0x4b, 0x9f, 0x7b, 0x1a, 0xba,
	0x1f, 0xce, 0x66, 0x6c, 0xce, 0xe4, 0x11, 0xe0, 0x3d, 0x40, 0xd3, 0x7e, 0x98, 0x9e, 0x64, 0xeb,
	0x89, 0x9f, 0x47, 0x39, 0x23, 0x41, 0x5f, 0xef, 0x7b, 0xaf, 0x4c, 0xaf, 0xc8, 0xf2, 0x51, 0xd2,
	0x8f, 0x04, 0xa7, 0x30, 0x7e, 0xa1, 0x61, 0xeb, 0x77, 0xbc, 0x98, 0xb1, 0xf9, 0x48, 0x1e, 0xa6,
	0xea, 0x19, 0xca, 0x90, 0xbe, 0xb2, 0xad, 0xd9, 0x21, 0x42, 0x51, 0xeb, 0xb7, 0x94, 0x5e, 0xca,
	0xf8, 0x46, 0x0e, 0x17, 0x6b, 0x72, 0xae, 0xdd, 0xa6, 0xd4, 0x52, 0xfe, 0x8f, 0x0f, 0x4b, 0x98,
	0x84, 0xaf, 0x4d, 0xba, 0x03, 0x9f, 0xe0, 0x72, 0x45, 0x3e, 0x2d, 0xba, 0x16, 0xd9, 0x85, 0x22,
	0xb8, 0x6e, 0xa7, 0x27, 0x28, 0x5a, 0xab, 0xb3, 0x7a, 0x01, 0x37, 0xe6, 0x5b, 0xbc, 0x3b, 0xd3,
	0x09, 0x6d, 0x55, 0x6e, 0xab, 0xaf, 0xb2, 0x80, 0x4d, 0xa8, 0x6e, 0xc3, 0x5e, 0xc7, 0xb1, 0xc3,
	0xc7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0x73, 0x24, 0x86, 0x59, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SineServiceClient is the client API for SineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SineServiceClient interface {
	// GetGraph takes some simple sine input data and returns an encoded
	// file with some optional error or debug data
	GetGraph(ctx context.Context, in *Sine, opts ...grpc.CallOption) (*SineGraph, error)
}

type sineServiceClient struct {
	cc *grpc.ClientConn
}

func NewSineServiceClient(cc *grpc.ClientConn) SineServiceClient {
	return &sineServiceClient{cc}
}

func (c *sineServiceClient) GetGraph(ctx context.Context, in *Sine, opts ...grpc.CallOption) (*SineGraph, error) {
	out := new(SineGraph)
	err := c.cc.Invoke(ctx, "/sineservice.SineService/GetGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SineServiceServer is the server API for SineService service.
type SineServiceServer interface {
	// GetGraph takes some simple sine input data and returns an encoded
	// file with some optional error or debug data
	GetGraph(context.Context, *Sine) (*SineGraph, error)
}

// UnimplementedSineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSineServiceServer struct {
}

func (*UnimplementedSineServiceServer) GetGraph(ctx context.Context, req *Sine) (*SineGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}

func RegisterSineServiceServer(s *grpc.Server, srv SineServiceServer) {
	s.RegisterService(&_SineService_serviceDesc, srv)
}

func _SineService_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SineServiceServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sineservice.SineService/GetGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SineServiceServer).GetGraph(ctx, req.(*Sine))
	}
	return interceptor(ctx, in, info, handler)
}

var _SineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sineservice.SineService",
	HandlerType: (*SineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGraph",
			Handler:    _SineService_GetGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sine-service.proto",
}
